你了解哪些vue性能优化方法？
根据题目描述，这里主要探讨Vue代码层面的优化：
①路由懒加载
const router = new VueRouter({
  routes:[
    {path:'/foo',component:()=>import('./Foo.vue')}
  ]
})
②keep-alive缓存页面
<template>
  <div id="app">
    <keep-alive>
      <router-view/>
    </keep-alive>
  </div>
</template>
③使用v-show复用DOM
<template>
  <div class="cell">
    <div v-show="value" class="on">
      <Heavy :n="10000"/>
    </div>
    <section v-show="!value" class="off">
      <Heavy :n="10000"/>
    </section>
  </div>
</template>
④ v-for遍历避免同时使用v-if
⑤ 长列表性能优化
1）如果列表是纯粹的数据展示，不会有任何变化，就不需要做响应化
export default{
  data()=>({
    users:[]
  }),
  async created(){
    const users = await axios.get("/api/users");
    this.users = Object.freeze(users);
  }
}
2)如果是大数据长列表，可以采用虚拟滚动，只渲染少部分区域的内容
<recycle-scroller 
  class="items" 
  :items="items" 
  :item-size="24">
  <template v-slot="{item}">
    <FetchItemView
      :item = "item"
      @vote="voteItem(item)"/>
  </template>
</recycle-scroller>
参考vue-virtual-scroller,vue-virtual-scroll-list
⑥事件的销毁
Vue组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。
created(){
  this.timer = setInterval(this.refresh,2000)
},
beforeDestroy(){
  clearInterval(this.timer)
}
⑦图片懒加载
对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域的图片先不做加载，
等到滚动到可视区域后再去加载。
<img v-lazy="/static/img/1.png">
参考项目vue-lazyload
⑧第三方插件按需引入
像element-ui这样的第三方组件库可以按需引入避免体积太大
import vue from 'vue'
import {Button,Select} from 'element-ui';
Vue.use(Button)
Vue.use(Select)
⑨无状态的组件标记为函数式组件
<template functional>
  <div class="cell">
    <div v-if="props.value" class="on"></div>
    <section v-else class="off"></section>
  </div>
</template>
<script>
export default{
  props:['value']
}
</script>
⑩子组件分割
<template>
  <div>
    <Childcomp/>
  </div>
</template>
<script>
export default{
  components:{
    Childcomp:{
      methods:{
        heavy(){//耗时任务}
      },
      render(h){
        return h('div',this.heavy())
      }
    }
  }
}
</script>
11，ssr
