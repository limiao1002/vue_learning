你怎么理解vue中的diff算法？
由于在浏览器中操作DOM的代价是非常昂贵的，所以才在vue中引入了virtual DOM,virtual DOM是对真实DOM的一种抽象描述。
即使使用了Virtual DOM来进行真实DOM的渲染，在页面更新的时候，也不能全量地将整颗virtual DOM进行渲染，而是去渲染改变的部分，
这时候就需要一个计算Virtual DOM树改变部分的算法了，这个算法就是Diff算法。传统的Diff算法通过循环递归对节点进行比较，然后
判断每个节点的状态以及要做的操作（add,remove,change）,最后根据Virtual DOM进行DOM的渲染。更高效的diff算法：深度优先，同级比较
假设：①两个相同组件产生类似的DOM结构，不同的组件产生不同的DOM结构；②对于同一层次的一组子节点，它们可以通过唯一的id进行区分。
同层比较：新的diff算法是逐层进行比较，只比较同一层次的节点，大大降低了复杂度。
不同类型节点的比较：如果发现新旧两个节点类型不同时，Diff算法会直接删除旧的节点及其子节点并插入新的节点，这是由于前面提出的不同组件
产生的DOM结构一般时不同的，所以可以不用浪费时间去比较。注意的是，删除节点意味着彻底销毁该节点，并不会将该节点去与后面的节点相比较。
相同类型节点的比较：若是两个节点类型相同时，Diff算法会更新节点的属性实现转换。
列表节点的比较：列表节点的操作一般包括添加、删除和排序，列表节点需要我们给它一个key才能进行高效的比较。
Diff算法的实现：
Vue的diff算法与上面的思路答题相似，只比较同级的节点，若找不到与新节点类型相同的节点，则插入一个新节点，若有相同类型的节点则进行
节点属性的更新，最后删除新节点列表中不包含的旧节点。